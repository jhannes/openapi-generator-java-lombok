@Data
{{#if parent}}
@EqualsAndHashCode(callSuper = true)
{{/if}}
public {{#if children}}sealed{{else}}final{{/if}} class {{classname}}
	{{~#if parent}} extends {{{parent}}}{{/if}}
 	{{~#interfaces}}{{#if @first}} implements {{else}}, {{/if}}{{{.}}}{{/interfaces}}
 	{{~#children}}{{#if @first}} permits {{else}}, {{/if}}{{{classname}}}{{/children}} {
{{#vars}}
{{#if isEnum}}

{{#if isContainer}}
{{#mostInnerItems}}
    {{>modelEnum}}
{{/mostInnerItems}}
{{else}}
    {{>modelEnum}}
{{/if}}

{{/if}}
{{/vars}}

{{#vars}}
{{#if description}}
    /**
     * {{description}}
    */
{{/if}}
    private {{{datatypeWithEnum}}} {{baseName}}{{#if defaultValue}} = {{{defaultValue}}}{{else unless required}} = null{{/if}};
{{/vars}}
{{#parentVars}}

    @Override
    public {{classname}} {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        super.{{setter}}({{name}});
        return this;
    }
{{/parentVars}}

    public boolean isEmpty() {
{{#if parent}}
        return super.isEmpty()
{{#interfaceModels}}
{{#if isMixin}}
                && is{{name}}Empty()
{{/if}}
{{/interfaceModels}}
{{#optionalVars}}
{{#unless isNew}}
                && {{getter}}() == null
{{/unless}}{{/optionalVars}}
        ;
{{else if allOf}}
        return
{{~#interfaceModels}}
{{#if isMixin}}
{{#unless @first}}                &&{{/unless}} is{{name}}Empty()
{{/if}}
{{/interfaceModels}}
{{#optionalVars}}
{{#unless isNew}}
                && {{getter}}() == null
{{/unless}}
{{/optionalVars}}
        ;
{{else if hasOptional}}
        return
{{~#optionalVars}}
{{#unless @first}}                &&{{/unless}} {{getter}}() == null
{{/optionalVars}}
{{#interfaceModels}}
{{#if isMixin}}
                && is{{name}}Empty()
{{/if}}
{{/interfaceModels}}
        ;
{{else}}
        return false;
{{/if}}
    }

{{#isMixinAllOf allOf}}
    public {{classname}} putAll({{classname}} o) {
        o.copyTo{{name}}(this);
        return this;
    }

{{else}}
{{#notMixinDto}}
    public {{classname}} putAll({{classname}} o) {
{{#if parent}}
        super.putAll(o);
{{/if}}
{{#interfaceModels}}
{{#if isMixin}}
        o.copyTo{{name}}(this);
{{/if}}
{{/interfaceModels}}
{{#vars}}
{{#unless isNew}}
        if (o.{{getter}}() != null) {{setter}}(o.{{getter}}());
{{/unless}}
{{/vars}}
        return this;
    }

{{/notMixinDto}}
{{/isMixinAllOf}}
{{#mixinInterfaceModels}}
    @Override
    public {{../classname}} putAll({{classname}} o) {
        o.copyTo{{../name}}(this);
        return this;
    }

{{/mixinInterfaceModels}}
{{#isMixinAllOf}}
    public {{classname}} removeWhereEqual({{classname}} o) {
        o.removeWhereEqualFrom{{../name}}(this);
        return this;
    }

{{else}}
{{#notMixinDto}}
    public {{classname}} removeWhereEqual({{classname}} o) {
{{#if parent}}
{{#unless additionalProperties}}
        super.removeWhereEqual(o);
{{/unless}}
{{/if}}
{{#interfaceModels}}
{{#if isMixin}}
        o.removeWhereEqualFrom{{name}}(this);
{{/if}}
{{/interfaceModels}}
{{#optionalVars}}
{{#unless isNew}}
        if (Objects.equals({{getter}}(), o.{{getter}}())) {{setter}}(null);
{{/unless}}
{{/optionalVars}}
        return this;
    }

{{/notMixinDto}}
{{/isMixinAllOf}}
{{#mixinInterfaceModels}}
    @Override
    public {{../classname}} removeWhereEqual({{classname}} o) {
        o.removeWhereEqualFrom{{../name}}(this);
        return this;
    }

{{/mixinInterfaceModels}}
    public List<String> missingRequiredFields(String prefix) {
{{#if hasRequired or hasMoreModels}}
{{#if additionalProperties}}
        List<String> fields = new ArrayList<>();
{{else if parent}}
        List<String> fields = super.missingRequiredFields(prefix);
{{else}}
        List<String> fields = new ArrayList<>();
{{/if}}
{{#vars}}
{{#if required}}
{{#unless isInherited}}
        if ({{getter}}() == null) fields.add(prefix + "{{name}}");
{{/unless}}
{{else if isModel}}
        if ({{getter}}() != null) {
            fields.addAll({{getter}}().missingRequiredFields(prefix + ".{{name}}"));
        }
{{/if}}
{{/vars}}
        return fields;
{{else}}
        return List.of();
{{/if}}
    }

{{#isMixinAllOf}}
    @Override
    public void copyTo{{name}}({{classname}} o) {
{{#parentModel}}
        copyTo{{name}}(o);
{{/parentModel}}
{{#interfaceModels}}
        copyTo{{classname}}(o);
{{/interfaceModels}}
{{#vars}}
{{#unless isNew}}
        if ({{getter}}() != null) o.{{setter}}({{getter}}());
{{/unless}}
{{/vars}}
    }

    @Override
    public void removeWhereEqualFrom{{name}}({{classname}} o) {
{{#parentModel}}
        removeWhereEqualFrom{{name}}(o);
{{/parentModel}}
{{#interfaceModels}}
        removeWhereEqualFrom{{classname}}(o);
{{/interfaceModels}}
{{#optionalVars}}
{{#unless isNew}}
        if (Objects.equals({{getter}}(), o.{{getter}}())) o.{{setter}}(null);
{{/unless}}
{{/optionalVars}}
    }
{{/isMixinAllOf}}
}