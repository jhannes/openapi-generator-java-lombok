public sealed interface {{classname}}
 	{{~#interfaces}}{{#if @first}} extends {{else}}, {{/if}}{{{.}}}{{/interfaces}}
 	{{~#children}}{{#if @first}} permits {{else}}, {{/if}}{{{classname}}}{{/children}} {
{{#with discriminator}}

    {{{propertyType}}} {{propertyGetter}}();

    static Class<? extends {{{classname}}}> getType(String {{propertyName}}) {
        return switch ({{propertyName}}) {
{{#mappedModels}}
            case "{{mappingName}}" -> {{modelName}}.class;
{{/mappedModels}}
            default -> throw new IllegalArgumentException("Illegal {{propertyName}} " + {{propertyName}});
        };
    }
    {{#mappedModels}}

    static {{{modelName}}} create{{capitalizeFirst mappingName}}() {
        return new {{{modelName}}}().set{{capitalizeFirst propertyName}}("{{mappingName}}");
    }
    {{/mappedModels}}
{{/with}}
{{#unless interfaces}}

    {{classname}} putAll({{classname}} o);
    {{classname}} removeWhereEqual({{classname}} o);
    boolean hasNoOptionalProperties();
    List<String> missingRequiredFields(String prefix);
{{/unless}}

{{#implementations}}
    default void copyTo{{name}}({{classname}} o) {
    }
{{/implementations}}
{{#implementations}}
    default void removeWhereEqualFrom{{name}}({{classname}} o) {
    }
{{/implementations}}
}